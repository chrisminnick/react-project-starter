{
  "_args": [
    [
      "es6-module-transpiler-amd-formatter@git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
      "/Users/chrisjminnick/WebstormProjects/react-project-starter/node_modules/karma-es6-module-preprocessor"
    ]
  ],
  "_from": "git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
  "_id": "es6-module-transpiler-amd-formatter@0.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/es6-module-transpiler-amd-formatter",
  "_phantomChildren": {
    "amdefine": "1.0.0",
    "cls": "0.1.5",
    "private": "0.1.6"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/caridy/es6-module-transpiler-amd-formatter/master/package.json",
      "gitUrl": "git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
      "httpsUrl": "git+https://github.com/caridy/es6-module-transpiler-amd-formatter.git",
      "shortcut": "github:caridy/es6-module-transpiler-amd-formatter",
      "ssh": "git@github.com:caridy/es6-module-transpiler-amd-formatter.git",
      "sshUrl": "git+ssh://git@github.com/caridy/es6-module-transpiler-amd-formatter.git",
      "type": "github"
    },
    "name": "es6-module-transpiler-amd-formatter",
    "raw": "es6-module-transpiler-amd-formatter@git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
    "rawSpec": "git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
    "scope": null,
    "spec": "git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/karma-es6-module-preprocessor"
  ],
  "_resolved": "git://github.com/caridy/es6-module-transpiler-amd-formatter.git#a7684a3601081016d52b30cea038c08e412c91e8",
  "_shasum": "32f5af9bd9ab8acab5421ba5100da52bc1e20020",
  "_shrinkwrap": null,
  "_spec": "es6-module-transpiler-amd-formatter@git://github.com/caridy/es6-module-transpiler-amd-formatter.git",
  "_where": "/Users/chrisjminnick/WebstormProjects/react-project-starter/node_modules/karma-es6-module-preprocessor",
  "author": {
    "email": "caridy@gmail.com",
    "name": "Caridy Patino"
  },
  "bugs": {
    "url": "https://github.com/caridy/es6-module-transpiler-amd-formatter/issues"
  },
  "dependencies": {
    "recast": "~0.8.0"
  },
  "description": "ES6 Module Transpiler Extension to Output AMD define() Format.",
  "devDependencies": {
    "chai": "~1.8.1",
    "es6-module-transpiler": "^0.10.0",
    "istanbul": "~0.1.46",
    "mocha": "~1.15.1",
    "requirejs": "^2.1.14",
    "xunit-file": "*"
  },
  "files": [
    "lib/",
    "index.js"
  ],
  "gitHead": "a7684a3601081016d52b30cea038c08e412c91e8",
  "homepage": "https://github.com/caridy/es6-module-transpiler-amd-formatter",
  "keywords": [
    "es6",
    "module",
    "transpiler",
    "amd",
    "module-formatter"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "es6-module-transpiler-amd-formatter",
  "optionalDependencies": {},
  "readme": "es6-module-transpiler-amd-formatter\n===================================\n\nES6 Module Transpiler Formatter to Output AMD `define()` Format\n\n## Overview\n\nES6 Module Transpiler `es6-module-transpiler` is an experimental compiler that allows you to write your JavaScript using a subset of the current ES6 module syntax, and compile it into various formats. The `es6-module-transpiler-amd-formatter` is one of those output formats that is focus on enabling the use of ES6 modules thru [RequireJS][] today.\n\n[RequireJS]: http://www.requirejs.org/\n[es6-module-transpiler]: https://github.com/square/es6-module-transpiler\n\n## Disclaimer\n\nThis output format compromises in few of the ES6 features in ES6 modules, including live bindings, sealed objects, etc. This compromise is Ok when you try to use them as AMD modules.\n\n## Usage\n\n### Build tools\n\nSince this formatters is an plugin for [es6-module-transpiler], you can use it with any existing build tool that supports [es6-module-transpiler] as the underlaying engine to transpile the ES6 modules.\n\nYou just need to make sure that `es6-module-transpiler-amd-formatter` is accessible for those tools, and pass the proper `formatter` option thru the [es6-module-transpiler][] configuration.\n\n### Executable\n\nIf you plan to use the `compile-module` CLI, the formatters can be used directly from the command line:\n\n```\n$ npm install es6-module-transpiler\n$ npm install es6-module-transpiler-amd-formatter\n$ ./node_modules/.bin/compile-modules convert -f es6-module-transpiler-amd-formatter path/to/**/*.js -o build/\n```\n\n__The `-f` option allow you to specify the path to the specific formatter, which is this case is an installed module called `es6-module-transpiler-amd-formatter`.__\n\n### Library\n\nYou can also use the formatter with the transpiler as a library:\n\n```javascript\nvar transpiler = require('es6-module-transpiler');\nvar AMDFormatter = require('es6-module-transpiler-amd-formatter');\nvar Container = transpiler.Container;\nvar FileResolver = transpiler.FileResolver;\n\nvar container = new Container({\n  resolvers: [new FileResolver(['lib/'])],\n  formatter: new AMDFormatter()\n});\n\ncontainer.getModule('index');\ncontainer.write('out/mylib.js');\n```\n\n## Supported ES6 Module Syntax\n\nAgain, this syntax is in flux and is closely tracking the module work being done by TC39. This package relies on the syntax supported by [es6-module-transpiler], which relies on [esprima], you can have more information about the supported syntax here: https://github.com/square/es6-module-transpiler#supported-es6-module-syntax\n\n[esprima]: https://github.com/ariya/esprima\n\n## Compiled Output\n\nFirst of all, the output format for `define()` might looks alien even for many developers, but considering that [es6-module-transpiler] relies on [Recast] to mutate the original ES6 code, it can output the corresponding [sourceMap], you should be able to debug the module code without having to understand the actual output format.\n\n[sourceMap]: http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\n[Recast]: https://github.com/benjamn/recast\n\n### Default export\n\nFor a module without imports, and a single default exports:\n\n```javascript\nexport default function (a, b) {\n  return a + b;\n}\n```\n\nwill produce something like this:\n\n```javascript\ndefine(\"component/foo\", [\"exports\"], function(__exports__) {\n  \"use strict\";\n\n  function __es6_export__(name, value) {\n    __exports__[name] = value;\n  }\n\n  __es6_export__(\"default\", function(a, b) {\n    return a + b;\n  });\n});\n```\n\n### Imports and exports\n\nA more complex example will look like this:\n\n```javascript\nimport assert from \"./assert\";\n\nexport default function (a, b) {\n  assert(a);\n  assert(b);\n  return a + b;\n};\n```\n\nand the output will be:\n\n```javascript\ndefine(\"component/foo\", [\"./assert\", \"exports\"], function(component$assert$$, __exports__) {\n  \"use strict\";\n\n  function __es6_export__(name, value) {\n    __exports__[name] = value;\n  }\n\n  var assert = component$assert$$[\"default\"];\n  __es6_export__(\"assert\", component$assert$$[\"assert\"]);\n\n  __es6_export__(\"default\", function(a, b) {\n    assert(a);\n    assert(b);\n    return a + b;\n  });\n});\n```\n\nPart of the goal, is try to preserve as much as possible the original code of the module within the factory function. Obviously, this is difficult when you have to export default functions and other declarations. The only modifications you will see in the body are the calls to the `__es6_export__()` method to export the new value when defined or updated, the rest of the code will remain immutable.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\nThanks, and enjoy living in the ES6 future!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/caridy/es6-module-transpiler-amd-formatter.git"
  },
  "scripts": {
    "pretest": "compile-modules convert -f ../../../../index.js test/**/*.js -o ./build",
    "test": "_mocha test/formatter --reporter spec"
  },
  "version": "0.3.0"
}
